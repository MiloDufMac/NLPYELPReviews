{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [
        "haPnY4kYauKr",
        "vhf4-QKzax7y",
        "gWdonT_za0NF",
        "Na9RkmkcbeZf",
        "DHBhYFtLbvte"
      ]
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# Project 4: Natural Language Processing (NLP)\n",
        "\n",
        "---\n",
        "\n",
        "Code Author: Jose Marin\\\n",
        "Role: TBD\\\n",
        "Organization: St. Edward's University\\\n",
        "Class: MATH 3439 INTRODUCTION TO DATA SCIENCE\n",
        "\n",
        "---\n",
        "\n",
        "# Our Research Questions\n",
        "**Main Question:** How well can we utilize Sentiment Analysis to predict the positivity of YELP Reviews?\n"
      ],
      "metadata": {
        "id": "GQU1f7u1aadN"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Imports"
      ],
      "metadata": {
        "id": "haPnY4kYauKr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Core libraries\n",
        "# --------------\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "\n",
        "# NLP Library\n",
        "# --------------\n",
        "import spacy\n",
        "from spacy.lang.en.stop_words import STOP_WORDS\n",
        "from spacy.tokenizer import Tokenizer\n",
        "\n",
        "# Machine learning libraries\n",
        "# --------------\n",
        "from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\n",
        "from sklearn.naive_bayes import MultinomialNB\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import classification_report, accuracy_score, confusion_matrix\n",
        "\n",
        "# Import Google Drive\n",
        "# --------------\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n",
        "\n",
        "# Visualization\n",
        "# --------------\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from tqdm import tqdm"
      ],
      "metadata": {
        "id": "6D2lxxCOaxji",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9c832ed7-6e04-4a7c-b89c-7d3c94848de4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Data Loading"
      ],
      "metadata": {
        "id": "vhf4-QKzax7y"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "drive_dir = '/content/drive/MyDrive/JUNIOR YEAR/Spring Semester/Intro To Data Science/Projects/PROJECT_4/DATA/KaggleData'\n",
        "df = pd.read_csv(drive_dir + '/yelp.csv')"
      ],
      "metadata": {
        "id": "hU6C9IWaOPDG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Variables\n",
        "df_types = df.dtypes\n",
        "df_shape = df.shape\n",
        "df_columns = df.columns.tolist()\n",
        "\n",
        "# Printing Statements\n",
        "print(f'Rows, Columns count: \\n{df_shape}\\n')\n",
        "print(f'Dataframe Columns: \\n{df_columns}\\n')\n",
        "print(f'Columsn Datatypes: \\n{df_types}\\n')\n",
        "\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qAR4vA9aPMAI",
        "outputId": "6a2101e9-9edc-45ce-dadd-cba9b8fb35a8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Rows, Columns count: \n",
            "(10000, 10)\n",
            "\n",
            "Dataframe Columns: \n",
            "['business_id', 'date', 'review_id', 'stars', 'text', 'type', 'user_id', 'cool', 'useful', 'funny']\n",
            "\n",
            "Columsn Datatypes: \n",
            "business_id    object\n",
            "date           object\n",
            "review_id      object\n",
            "stars           int64\n",
            "text           object\n",
            "type           object\n",
            "user_id        object\n",
            "cool            int64\n",
            "useful          int64\n",
            "funny           int64\n",
            "dtype: object\n",
            "\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              business_id        date               review_id  stars  \\\n",
              "0  9yKzy9PApeiPPOUJEtnvkg  2011-01-26  fWKvX83p0-ka4JS3dc6E5A      5   \n",
              "1  ZRJwVLyzEJq1VAihDhYiow  2011-07-27  IjZ33sJrzXqU-0X6U8NwyA      5   \n",
              "2  6oRAC4uyJCsJl1X0WZpVSA  2012-06-14  IESLBzqUCLdSzSqm0eCSxQ      4   \n",
              "3  _1QQZuf4zZOyFCvXc0o6Vg  2010-05-27  G-WvGaISbqqaMHlNnByodA      5   \n",
              "4  6ozycU1RpktNG2-1BroVtw  2012-01-05  1uJFq2r5QfJG_6ExMRCaGw      5   \n",
              "\n",
              "                                                text    type  \\\n",
              "0  My wife took me here on my birthday for breakf...  review   \n",
              "1  I have no idea why some people give bad review...  review   \n",
              "2  love the gyro plate. Rice is so good and I als...  review   \n",
              "3  Rosie, Dakota, and I LOVE Chaparral Dog Park!!...  review   \n",
              "4  General Manager Scott Petello is a good egg!!!...  review   \n",
              "\n",
              "                  user_id  cool  useful  funny  \n",
              "0  rLtl8ZkDX5vH5nAx9C3q5Q     2       5      0  \n",
              "1  0a2KyEL0d3Yb1V6aivbIuQ     0       0      0  \n",
              "2  0hT2KtfLiobPvh6cDC8JQg     0       1      0  \n",
              "3  uZetl9T0NcROGOyFfughhg     1       2      0  \n",
              "4  vYmM4KTsC8ZfQBg-j5MWkw     0       0      0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-69e2595d-b9a3-4a95-b162-30e76dc546bd\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>business_id</th>\n",
              "      <th>date</th>\n",
              "      <th>review_id</th>\n",
              "      <th>stars</th>\n",
              "      <th>text</th>\n",
              "      <th>type</th>\n",
              "      <th>user_id</th>\n",
              "      <th>cool</th>\n",
              "      <th>useful</th>\n",
              "      <th>funny</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>9yKzy9PApeiPPOUJEtnvkg</td>\n",
              "      <td>2011-01-26</td>\n",
              "      <td>fWKvX83p0-ka4JS3dc6E5A</td>\n",
              "      <td>5</td>\n",
              "      <td>My wife took me here on my birthday for breakf...</td>\n",
              "      <td>review</td>\n",
              "      <td>rLtl8ZkDX5vH5nAx9C3q5Q</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>ZRJwVLyzEJq1VAihDhYiow</td>\n",
              "      <td>2011-07-27</td>\n",
              "      <td>IjZ33sJrzXqU-0X6U8NwyA</td>\n",
              "      <td>5</td>\n",
              "      <td>I have no idea why some people give bad review...</td>\n",
              "      <td>review</td>\n",
              "      <td>0a2KyEL0d3Yb1V6aivbIuQ</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>6oRAC4uyJCsJl1X0WZpVSA</td>\n",
              "      <td>2012-06-14</td>\n",
              "      <td>IESLBzqUCLdSzSqm0eCSxQ</td>\n",
              "      <td>4</td>\n",
              "      <td>love the gyro plate. Rice is so good and I als...</td>\n",
              "      <td>review</td>\n",
              "      <td>0hT2KtfLiobPvh6cDC8JQg</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>_1QQZuf4zZOyFCvXc0o6Vg</td>\n",
              "      <td>2010-05-27</td>\n",
              "      <td>G-WvGaISbqqaMHlNnByodA</td>\n",
              "      <td>5</td>\n",
              "      <td>Rosie, Dakota, and I LOVE Chaparral Dog Park!!...</td>\n",
              "      <td>review</td>\n",
              "      <td>uZetl9T0NcROGOyFfughhg</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>6ozycU1RpktNG2-1BroVtw</td>\n",
              "      <td>2012-01-05</td>\n",
              "      <td>1uJFq2r5QfJG_6ExMRCaGw</td>\n",
              "      <td>5</td>\n",
              "      <td>General Manager Scott Petello is a good egg!!!...</td>\n",
              "      <td>review</td>\n",
              "      <td>vYmM4KTsC8ZfQBg-j5MWkw</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-69e2595d-b9a3-4a95-b162-30e76dc546bd')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-69e2595d-b9a3-4a95-b162-30e76dc546bd button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-69e2595d-b9a3-4a95-b162-30e76dc546bd');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-127f545f-a283-40a8-899c-8ec061f34d89\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-127f545f-a283-40a8-899c-8ec061f34d89')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-127f545f-a283-40a8-899c-8ec061f34d89 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 10000,\n  \"fields\": [\n    {\n      \"column\": \"business_id\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4174,\n        \"samples\": [\n          \"jQST5lkLGX9L52-A10TGTQ\",\n          \"tpIU_ZvIfCfCp36IgghlHQ\",\n          \"3g2ofV7mhEoPyfF7vFMObA\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"date\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 1995,\n        \"samples\": [\n          \"2012-09-11\",\n          \"2009-08-28\",\n          \"2009-10-19\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"review_id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10000,\n        \"samples\": [\n          \"hwYVJs8Ko4PMjI19QcR57g\",\n          \"0mvthYPKb2ZmKhCADiKSmQ\",\n          \"XJHknNIecha6h0wkBSZB4w\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"stars\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          4,\n          1,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 9998,\n        \"samples\": [\n          \"I've been to Bookman's a few times and have mixed feelings about it. If you're going just to look around, it's fun to see all the stuff they have in there. Between the movie selection, CD's, books and trinkets, it was fun to shop around. But, as someone interested in selling to them, I would never do that again. I brought in a huge selection of books I was interested in selling and they only took 4 of the books and offered me a few measely dollars. I was shocked. I understand they need to make a profit but I wasn't even getting $1 for each book they wanted. A total rip off if you ask me and a waste of time waiting for them to look through my stuff. I'm not sure if I will be returning anytime soon.\",\n          \"These are simply the BEST sandwiches and salads. If you like your food (a) locally grown; (b) freshly made; (c) organic/all natural; and (d) yummy - and who doesn't? - this is the place for you.\\n\\nNow, admittedly they have something of a soup-nazi routine set up and if you walk in and don't know the drill, it can be confusing.  So pay attention:   \\n1.  Look at menu.\\n2.  Decide what you want.\\n3.  Wait your turn to order.\\n4.  Order (give your name).\\n5.  Wait your turn to be called to pay the other girl for the order you placed.\\n6.  Pay her.\\n7.  Wait until your food is ready.\\n8.  Leave with your food.\\n\\nNote that there is no place to sit inside - so you can either sit outside, or, (if it is 157 degrees out that day), see if you can find a place to sit over at LUX, they are very welcoming of Pane Bianco diners. \\n\\nIt's all good.\",\n          \"Every friday, my dad and I eat here. We order the same thing... pizza wraps. they are good and fillng. iced tea hits the spot. Typical strip mall pizza.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"review\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"user_id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 6403,\n        \"samples\": [\n          \"NcqFZT7ngEDHSJqRgpV8pg\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cool\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 0,\n        \"max\": 77,\n        \"num_unique_values\": 29,\n        \"samples\": [\n          38\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"useful\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 0,\n        \"max\": 76,\n        \"num_unique_values\": 28,\n        \"samples\": [\n          9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"funny\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 57,\n        \"num_unique_values\": 29,\n        \"samples\": [\n          24\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Data Preparation"
      ],
      "metadata": {
        "id": "gWdonT_za0NF"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### NaN Values"
      ],
      "metadata": {
        "id": "sa09gQPXa2VR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Get total number of rows in the DataFrame\n",
        "total_rows = len(df)\n",
        "\n",
        "# Initialize lists to store column names and their NaN percentages\n",
        "nan_columns = []\n",
        "nan_percentages = []\n",
        "\n",
        "# Checks which columns have NaN values\n",
        "for col in df.columns:\n",
        "    if df[col].isna().any():\n",
        "        sum_nan = df[col].isna().sum()\n",
        "        percent_nan = (sum_nan / total_rows) * 100  # Calculate percentage\n",
        "        print(f\"Column '{col}' contains {sum_nan} NaN value(s), which is {percent_nan:.2f}% of the df data.\")\n",
        "        nan_columns.append(col)\n",
        "        nan_percentages.append(percent_nan)"
      ],
      "metadata": {
        "id": "Oc8wEBtCbCjT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Cleaning Data"
      ],
      "metadata": {
        "id": "3jcOHA0kbC97"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Dropping Columns\n",
        "# Columns to drop: business_id, review_id, type, user_id, date, cool, useful, funny\n",
        "df = df.drop(['business_id', 'date','review_id', 'type', 'user_id', 'cool', 'useful', 'funny'], axis=1)"
      ],
      "metadata": {
        "id": "18rFofF3bFSU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Capitalize first letter of each column name\n",
        "df.columns = [col.capitalize() for col in df.columns]"
      ],
      "metadata": {
        "id": "MvY3481DQOwl"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WOYJ62wZSfG4",
        "outputId": "73e38f68-0bec-42a4-bbe1-4d2f8f5f47a4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Stars                                               Text\n",
              "0      5  My wife took me here on my birthday for breakf...\n",
              "1      5  I have no idea why some people give bad review...\n",
              "2      4  love the gyro plate. Rice is so good and I als...\n",
              "3      5  Rosie, Dakota, and I LOVE Chaparral Dog Park!!...\n",
              "4      5  General Manager Scott Petello is a good egg!!!..."
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8561253b-ce7c-427e-aee7-ef5c9abecebe\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Stars</th>\n",
              "      <th>Text</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>5</td>\n",
              "      <td>My wife took me here on my birthday for breakf...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>5</td>\n",
              "      <td>I have no idea why some people give bad review...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>4</td>\n",
              "      <td>love the gyro plate. Rice is so good and I als...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>5</td>\n",
              "      <td>Rosie, Dakota, and I LOVE Chaparral Dog Park!!...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>General Manager Scott Petello is a good egg!!!...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8561253b-ce7c-427e-aee7-ef5c9abecebe')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8561253b-ce7c-427e-aee7-ef5c9abecebe button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8561253b-ce7c-427e-aee7-ef5c9abecebe');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-1a63894f-a91e-47c7-a139-e17e00d9fc9c\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1a63894f-a91e-47c7-a139-e17e00d9fc9c')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-1a63894f-a91e-47c7-a139-e17e00d9fc9c button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 10000,\n  \"fields\": [\n    {\n      \"column\": \"Stars\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          4,\n          1,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 9998,\n        \"samples\": [\n          \"I've been to Bookman's a few times and have mixed feelings about it. If you're going just to look around, it's fun to see all the stuff they have in there. Between the movie selection, CD's, books and trinkets, it was fun to shop around. But, as someone interested in selling to them, I would never do that again. I brought in a huge selection of books I was interested in selling and they only took 4 of the books and offered me a few measely dollars. I was shocked. I understand they need to make a profit but I wasn't even getting $1 for each book they wanted. A total rip off if you ask me and a waste of time waiting for them to look through my stuff. I'm not sure if I will be returning anytime soon.\",\n          \"These are simply the BEST sandwiches and salads. If you like your food (a) locally grown; (b) freshly made; (c) organic/all natural; and (d) yummy - and who doesn't? - this is the place for you.\\n\\nNow, admittedly they have something of a soup-nazi routine set up and if you walk in and don't know the drill, it can be confusing.  So pay attention:   \\n1.  Look at menu.\\n2.  Decide what you want.\\n3.  Wait your turn to order.\\n4.  Order (give your name).\\n5.  Wait your turn to be called to pay the other girl for the order you placed.\\n6.  Pay her.\\n7.  Wait until your food is ready.\\n8.  Leave with your food.\\n\\nNote that there is no place to sit inside - so you can either sit outside, or, (if it is 157 degrees out that day), see if you can find a place to sit over at LUX, they are very welcoming of Pane Bianco diners. \\n\\nIt's all good.\",\n          \"Every friday, my dad and I eat here. We order the same thing... pizza wraps. they are good and fillng. iced tea hits the spot. Typical strip mall pizza.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Labeling"
      ],
      "metadata": {
        "id": "_tPK8xCU13YU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zC6JjDGu147i",
        "outputId": "ab8db230-bec1-43ea-876e-79aef8dad3e6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Stars                                               Text\n",
              "0      5  My wife took me here on my birthday for breakf...\n",
              "1      5  I have no idea why some people give bad review...\n",
              "2      4  love the gyro plate. Rice is so good and I als...\n",
              "3      5  Rosie, Dakota, and I LOVE Chaparral Dog Park!!...\n",
              "4      5  General Manager Scott Petello is a good egg!!!..."
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0b05ef5a-7ca5-4575-b9f9-ef782879caf7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Stars</th>\n",
              "      <th>Text</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>5</td>\n",
              "      <td>My wife took me here on my birthday for breakf...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>5</td>\n",
              "      <td>I have no idea why some people give bad review...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>4</td>\n",
              "      <td>love the gyro plate. Rice is so good and I als...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>5</td>\n",
              "      <td>Rosie, Dakota, and I LOVE Chaparral Dog Park!!...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>General Manager Scott Petello is a good egg!!!...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0b05ef5a-7ca5-4575-b9f9-ef782879caf7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0b05ef5a-7ca5-4575-b9f9-ef782879caf7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0b05ef5a-7ca5-4575-b9f9-ef782879caf7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-1f5c80bb-789f-468e-959b-5387bb62827c\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1f5c80bb-789f-468e-959b-5387bb62827c')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-1f5c80bb-789f-468e-959b-5387bb62827c button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 10000,\n  \"fields\": [\n    {\n      \"column\": \"Stars\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          4,\n          1,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 9998,\n        \"samples\": [\n          \"I've been to Bookman's a few times and have mixed feelings about it. If you're going just to look around, it's fun to see all the stuff they have in there. Between the movie selection, CD's, books and trinkets, it was fun to shop around. But, as someone interested in selling to them, I would never do that again. I brought in a huge selection of books I was interested in selling and they only took 4 of the books and offered me a few measely dollars. I was shocked. I understand they need to make a profit but I wasn't even getting $1 for each book they wanted. A total rip off if you ask me and a waste of time waiting for them to look through my stuff. I'm not sure if I will be returning anytime soon.\",\n          \"These are simply the BEST sandwiches and salads. If you like your food (a) locally grown; (b) freshly made; (c) organic/all natural; and (d) yummy - and who doesn't? - this is the place for you.\\n\\nNow, admittedly they have something of a soup-nazi routine set up and if you walk in and don't know the drill, it can be confusing.  So pay attention:   \\n1.  Look at menu.\\n2.  Decide what you want.\\n3.  Wait your turn to order.\\n4.  Order (give your name).\\n5.  Wait your turn to be called to pay the other girl for the order you placed.\\n6.  Pay her.\\n7.  Wait until your food is ready.\\n8.  Leave with your food.\\n\\nNote that there is no place to sit inside - so you can either sit outside, or, (if it is 157 degrees out that day), see if you can find a place to sit over at LUX, they are very welcoming of Pane Bianco diners. \\n\\nIt's all good.\",\n          \"Every friday, my dad and I eat here. We order the same thing... pizza wraps. they are good and fillng. iced tea hits the spot. Typical strip mall pizza.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['Stars'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XgNTPH3l2G5A",
        "outputId": "00766456-9ac2-448c-fe17-010495c5f79a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Stars\n",
              "4    3526\n",
              "5    3337\n",
              "3    1461\n",
              "2     927\n",
              "1     749\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Stars</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>3526</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>3337</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1461</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>927</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>749</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def label_encoding(stars):\n",
        "    if stars in [1, 2]:\n",
        "        return 'Negative'\n",
        "    elif stars == 3:\n",
        "        return 'Neutral'\n",
        "    elif stars in [4, 5]:\n",
        "        return 'Positive'\n",
        "\n",
        "# Apply the function to your DataFrame\n",
        "df['Sentiment'] = df['Stars'].apply(label_encoding)"
      ],
      "metadata": {
        "id": "JupJeYg-16t2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sentiment_map = {'Negative': 0, 'Neutral': 1, 'Positive': 2}\n",
        "df['Sentiment_Label'] = df['Sentiment'].map(sentiment_map)"
      ],
      "metadata": {
        "id": "mEr7t0ND3hHw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "lOq_e96m3TL3",
        "outputId": "ec840185-01f4-4484-b9d1-cac988e48feb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Stars                                               Text Sentiment  \\\n",
              "0      5  My wife took me here on my birthday for breakf...  Positive   \n",
              "1      5  I have no idea why some people give bad review...  Positive   \n",
              "2      4  love the gyro plate. Rice is so good and I als...  Positive   \n",
              "3      5  Rosie, Dakota, and I LOVE Chaparral Dog Park!!...  Positive   \n",
              "4      5  General Manager Scott Petello is a good egg!!!...  Positive   \n",
              "\n",
              "   Sentiment_Label  \n",
              "0                2  \n",
              "1                2  \n",
              "2                2  \n",
              "3                2  \n",
              "4                2  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-411467a0-00cc-434b-9923-4b26ab68f039\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Stars</th>\n",
              "      <th>Text</th>\n",
              "      <th>Sentiment</th>\n",
              "      <th>Sentiment_Label</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>5</td>\n",
              "      <td>My wife took me here on my birthday for breakf...</td>\n",
              "      <td>Positive</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>5</td>\n",
              "      <td>I have no idea why some people give bad review...</td>\n",
              "      <td>Positive</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>4</td>\n",
              "      <td>love the gyro plate. Rice is so good and I als...</td>\n",
              "      <td>Positive</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>5</td>\n",
              "      <td>Rosie, Dakota, and I LOVE Chaparral Dog Park!!...</td>\n",
              "      <td>Positive</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>General Manager Scott Petello is a good egg!!!...</td>\n",
              "      <td>Positive</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-411467a0-00cc-434b-9923-4b26ab68f039')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-411467a0-00cc-434b-9923-4b26ab68f039 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-411467a0-00cc-434b-9923-4b26ab68f039');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-922e8907-7bd2-445a-a332-dff34e400dfe\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-922e8907-7bd2-445a-a332-dff34e400dfe')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-922e8907-7bd2-445a-a332-dff34e400dfe button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 10000,\n  \"fields\": [\n    {\n      \"column\": \"Stars\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          4,\n          1,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 9998,\n        \"samples\": [\n          \"I've been to Bookman's a few times and have mixed feelings about it. If you're going just to look around, it's fun to see all the stuff they have in there. Between the movie selection, CD's, books and trinkets, it was fun to shop around. But, as someone interested in selling to them, I would never do that again. I brought in a huge selection of books I was interested in selling and they only took 4 of the books and offered me a few measely dollars. I was shocked. I understand they need to make a profit but I wasn't even getting $1 for each book they wanted. A total rip off if you ask me and a waste of time waiting for them to look through my stuff. I'm not sure if I will be returning anytime soon.\",\n          \"These are simply the BEST sandwiches and salads. If you like your food (a) locally grown; (b) freshly made; (c) organic/all natural; and (d) yummy - and who doesn't? - this is the place for you.\\n\\nNow, admittedly they have something of a soup-nazi routine set up and if you walk in and don't know the drill, it can be confusing.  So pay attention:   \\n1.  Look at menu.\\n2.  Decide what you want.\\n3.  Wait your turn to order.\\n4.  Order (give your name).\\n5.  Wait your turn to be called to pay the other girl for the order you placed.\\n6.  Pay her.\\n7.  Wait until your food is ready.\\n8.  Leave with your food.\\n\\nNote that there is no place to sit inside - so you can either sit outside, or, (if it is 157 degrees out that day), see if you can find a place to sit over at LUX, they are very welcoming of Pane Bianco diners. \\n\\nIt's all good.\",\n          \"Every friday, my dad and I eat here. We order the same thing... pizza wraps. they are good and fillng. iced tea hits the spot. Typical strip mall pizza.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sentiment\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Positive\",\n          \"Negative\",\n          \"Neutral\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sentiment_Label\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2,\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df[['Sentiment', 'Sentiment_Label']].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xUfXS8RT33uo",
        "outputId": "58a8dc5c-fae9-4edd-a0ae-6c066bd6ff3b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Sentiment  Sentiment_Label\n",
              "Positive   2                  6863\n",
              "Negative   0                  1676\n",
              "Neutral    1                  1461\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Sentiment</th>\n",
              "      <th>Sentiment_Label</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Positive</th>\n",
              "      <th>2</th>\n",
              "      <td>6863</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Negative</th>\n",
              "      <th>0</th>\n",
              "      <td>1676</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Neutral</th>\n",
              "      <th>1</th>\n",
              "      <td>1461</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Visualize sentiment distribution\n",
        "plt.figure(figsize=(8,5))\n",
        "df['Sentiment'].value_counts().plot(kind='bar')\n",
        "plt.title('Sentiment Distribution')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "G4uF6Fy3AFcF",
        "outputId": "feb1bcad-a5ac-4def-e98e-6c0b07d27968"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "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l1OSMy4uzhrr1q2bs1u3bjdc5/V6mzp1qvOnf6Xt3bvXKck5fPhwl7rx48c7JTk3b95sjYWEhDglObdv326NZWZmOr29vZ3PPvvsFdsCUPE4wwqg1B588EElJyfrkUce0b59+zR79mxFRUWpfv36+uCDD6y69957T0VFRfrtb3+r77//3lqCg4N1++23a8uWLS7r9fPz05NPPml99vLyUseOHfXNN9/cUr9PPPGE/P39rc+dOnWSJD355JMu1z926tRJeXl5+u677yRJGzduVFZWln7/+9+79O/p6alOnTpd0b8kjRo1yuVzly5dbrn/G/Hz89P58+evOV986cbatWuVn59f6u2MHj36pmv79Omj+vXrW587duyoTp066cMPPyz19m9G8frHjRvnMv7ss89KkpKSklzGw8PD1aVLF+tzYGCgmjdvXu7/zADcHAIrgFty991367333tO5c+e0e/duxcfH6/z58+rbt68OHTokSTp69KicTqduv/12BQYGuixfffXVFTdoNWjQ4IrrEWvWrKlz587dUq+NGjVy+VwcXhs2bHjV8eLtHT16VJLUo0ePK/r/6KOPrui/WrVq1vWWZdn/jVy4cEE1atS45ny3bt0UExOj559/XrfddpseffRRLV269IprOq+nSpUqatCgwU3X33777VeMNWvWrNyfDfvtt9/Kw8NDTZs2dRkPDg5WQECAvv32W5fxn/+7IVXMPzMAN4dbKgGUCS8vL9199926++671axZMw0ZMkSrVq3S1KlTVVRUJJvNpnXr1l31rnU/Pz+Xz9e6s915i0/hu9Z6b7S9oqIiST9exxocHHxF3c/vTi/vO/OvJj8/X19//bVatWp1zRqbzaZ3331XO3fu1Jo1a7RhwwYNHTpUc+bM0c6dO6/453A13t7e8vAo23MdNpvtqv9si29Su9V134zy+ncOQNkgsAIocx06dJAknT59WpLUpEkTOZ1OhYWFqVmzZmWyjYp8q1GTJk0k/fjkg8jIyDJZZ1n3/+677+rSpUuKioq6YW3nzp3VuXNnvfDCC1qxYoX69++vt99+W8OHDy/zvorPTv/U119/7fJEgZo1a171V+8/Pwtakt5CQkJUVFSko0ePqmXLltZ4RkaGsrKyFBISctPrAuB+XBIAoNS2bNly1TNQxdcPNm/eXJL0+OOPy9PTU88///wV9U6n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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Downloading Clean Data"
      ],
      "metadata": {
        "id": "Na9RkmkcbeZf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# After running the code, the CSV file will be available in the Colab environment's file explorer (left sidebar).\n",
        "# Click the three dots next to the file name and select \"Download\" to save it to your local machine.\n",
        "\n",
        "\n",
        "\n",
        "# Uncomment Code to download data*\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# df.to_csv('cleaned_data.csv', index=False)"
      ],
      "metadata": {
        "id": "fAEQCgI8bkJn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Pre-Processing"
      ],
      "metadata": {
        "id": "-LW-44IWboQr"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**🧹 Preprocessing with SpaCy**\n",
        "\n",
        "Preprocessing cleans and standardizes text to make it ready for feature extraction.  \n",
        "SpaCy will handle key NLP techniques like **tokenization**, **lemmatization**, and **stop word removal**.\n",
        "\n",
        "---\n",
        "\n",
        "**🔑 Key NLP Techniques (as per guidelines)**\n",
        "\n",
        "- **Tokenization**: Split text into words or tokens.  \n",
        "- **Lemmatization**: Reduce words to their base form (e.g., _\"running\"_ → _\"run\"_).  \n",
        "- **Stop Word Removal**: Remove common words (e.g., _\"the\"_, _\"is\"_) that add little meaning.  \n",
        "- **Lowercasing**: Standardize text case to reduce duplicates (e.g., _\"Love\"_ and _\"love\"_).  \n",
        "- **Punctuation Removal**: Eliminate punctuation for cleaner features.\n"
      ],
      "metadata": {
        "id": "NIsG7YSA0I_c"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "id": "MWVhQc-jbsgN",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "e44a86c5-9363-43db-b6f5-13dde745e9b1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Stars                                               Text Sentiment  \\\n",
              "0      5  My wife took me here on my birthday for breakf...  Positive   \n",
              "1      5  I have no idea why some people give bad review...  Positive   \n",
              "2      4  love the gyro plate. Rice is so good and I als...  Positive   \n",
              "3      5  Rosie, Dakota, and I LOVE Chaparral Dog Park!!...  Positive   \n",
              "4      5  General Manager Scott Petello is a good egg!!!...  Positive   \n",
              "\n",
              "   Sentiment_Label  \n",
              "0                2  \n",
              "1                2  \n",
              "2                2  \n",
              "3                2  \n",
              "4                2  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fd46df4b-1685-44e4-a0d4-46cc8b01955c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Stars</th>\n",
              "      <th>Text</th>\n",
              "      <th>Sentiment</th>\n",
              "      <th>Sentiment_Label</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>5</td>\n",
              "      <td>My wife took me here on my birthday for breakf...</td>\n",
              "      <td>Positive</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>5</td>\n",
              "      <td>I have no idea why some people give bad review...</td>\n",
              "      <td>Positive</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>4</td>\n",
              "      <td>love the gyro plate. Rice is so good and I als...</td>\n",
              "      <td>Positive</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>5</td>\n",
              "      <td>Rosie, Dakota, and I LOVE Chaparral Dog Park!!...</td>\n",
              "      <td>Positive</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>General Manager Scott Petello is a good egg!!!...</td>\n",
              "      <td>Positive</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fd46df4b-1685-44e4-a0d4-46cc8b01955c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-fd46df4b-1685-44e4-a0d4-46cc8b01955c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-fd46df4b-1685-44e4-a0d4-46cc8b01955c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-512fbfcd-57b1-4a78-804e-64b923b0ad9c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-512fbfcd-57b1-4a78-804e-64b923b0ad9c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-512fbfcd-57b1-4a78-804e-64b923b0ad9c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 10000,\n  \"fields\": [\n    {\n      \"column\": \"Stars\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          4,\n          1,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 9998,\n        \"samples\": [\n          \"I've been to Bookman's a few times and have mixed feelings about it. If you're going just to look around, it's fun to see all the stuff they have in there. Between the movie selection, CD's, books and trinkets, it was fun to shop around. But, as someone interested in selling to them, I would never do that again. I brought in a huge selection of books I was interested in selling and they only took 4 of the books and offered me a few measely dollars. I was shocked. I understand they need to make a profit but I wasn't even getting $1 for each book they wanted. A total rip off if you ask me and a waste of time waiting for them to look through my stuff. I'm not sure if I will be returning anytime soon.\",\n          \"These are simply the BEST sandwiches and salads. If you like your food (a) locally grown; (b) freshly made; (c) organic/all natural; and (d) yummy - and who doesn't? - this is the place for you.\\n\\nNow, admittedly they have something of a soup-nazi routine set up and if you walk in and don't know the drill, it can be confusing.  So pay attention:   \\n1.  Look at menu.\\n2.  Decide what you want.\\n3.  Wait your turn to order.\\n4.  Order (give your name).\\n5.  Wait your turn to be called to pay the other girl for the order you placed.\\n6.  Pay her.\\n7.  Wait until your food is ready.\\n8.  Leave with your food.\\n\\nNote that there is no place to sit inside - so you can either sit outside, or, (if it is 157 degrees out that day), see if you can find a place to sit over at LUX, they are very welcoming of Pane Bianco diners. \\n\\nIt's all good.\",\n          \"Every friday, my dad and I eat here. We order the same thing... pizza wraps. they are good and fillng. iced tea hits the spot. Typical strip mall pizza.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sentiment\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Positive\",\n          \"Negative\",\n          \"Neutral\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sentiment_Label\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2,\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 141
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**✅ Recommended SpaCy Model: `en_core_web_md`**\n",
        "\n",
        "It gives you the best balance for your NLP + classification pipeline.\n",
        "\n",
        "- ✅ Includes **word vectors**, which are useful for semantic tasks (e.g., document similarity, richer features for classification)\n",
        "- ✅ Has a **reasonable memory footprint** (~100–200MB), making it suitable for a 10,000-row dataset\n",
        "- ⚖️ Strikes the right balance for training a model like **Naive Bayes**, which benefits from good-quality features but doesn’t require large transformer-style embeddings like `en_core_web_lg`\n"
      ],
      "metadata": {
        "id": "ZPKy3UxxyaDa"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Enable tqdm for pandas\n",
        "tqdm.pandas()\n",
        "nlp = spacy.load('en_core_web_md')\n",
        "\n",
        "def preprocess_text(text):\n",
        "  # Make text lowercase\n",
        "  doc = nlp(text.lower())\n",
        "\n",
        "  # Remove punctuation and numbers\n",
        "  tokens = [token.text for token in doc if token.is_alpha]\n",
        "\n",
        "  # Remove stop words\n",
        "  tokens = [token for token in tokens if token not in STOP_WORDS]\n",
        "\n",
        "  # Lemmatization:\n",
        "  # process of reducing a word to its lemma (dictionary form), considering the word's context and part-of-speech\n",
        "  # Example: The base or dictionary form of a word, as in \"running\" would have \"run\" as its lemma.\n",
        "  tokens = [token.lemma_ for token in nlp(\" \".join(tokens))]\n",
        "\n",
        "  return \" \".join(tokens)\n",
        "\n",
        "# Apply pre-processing to my text column\n",
        "df['Processed Text'] = df['Text'].progress_apply(preprocess_text)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wlr1vdm4me7J",
        "outputId": "83e69140-e3df-4c38-8782-d6874a72d988"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 10000/10000 [08:56<00:00, 18.63it/s]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df[[\"Text\", \"Processed Text\"]].head()"
      ],
      "metadata": {
        "id": "rrFUWqkcqQxa",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "a276b8f8-7def-4a9c-f974-af256489af9a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                                Text  \\\n",
              "0  My wife took me here on my birthday for breakf...   \n",
              "1  I have no idea why some people give bad review...   \n",
              "2  love the gyro plate. Rice is so good and I als...   \n",
              "3  Rosie, Dakota, and I LOVE Chaparral Dog Park!!...   \n",
              "4  General Manager Scott Petello is a good egg!!!...   \n",
              "\n",
              "                                      Processed Text  \n",
              "0  wife take birthday breakfast excellent weather...  \n",
              "1  idea people bad review place goes probably gri...  \n",
              "2      love gyro plate rice good dig candy selection  \n",
              "3  rosie dakota love chaparral dog park convenien...  \n",
              "4  general manager scott petello good egg detail ...  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0804487b-58fd-427f-8401-7581708c46a8\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Text</th>\n",
              "      <th>Processed Text</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>My wife took me here on my birthday for breakf...</td>\n",
              "      <td>wife take birthday breakfast excellent weather...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>I have no idea why some people give bad review...</td>\n",
              "      <td>idea people bad review place goes probably gri...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>love the gyro plate. Rice is so good and I als...</td>\n",
              "      <td>love gyro plate rice good dig candy selection</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Rosie, Dakota, and I LOVE Chaparral Dog Park!!...</td>\n",
              "      <td>rosie dakota love chaparral dog park convenien...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>General Manager Scott Petello is a good egg!!!...</td>\n",
              "      <td>general manager scott petello good egg detail ...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0804487b-58fd-427f-8401-7581708c46a8')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0804487b-58fd-427f-8401-7581708c46a8 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0804487b-58fd-427f-8401-7581708c46a8');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a6d98ce0-1753-413e-9af4-9c799b92ea46\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a6d98ce0-1753-413e-9af4-9c799b92ea46')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a6d98ce0-1753-413e-9af4-9c799b92ea46 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df[[\\\"Text\\\", \\\"Processed Text\\\"]]\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"I have no idea why some people give bad reviews about this place. It goes to show you, you can please everyone. They are probably griping about something that their own fault...there are many people like that.\\n\\nIn any case, my friend and I arrived at about 5:50 PM this past Sunday. It was pretty crowded, more than I thought for a Sunday evening and thought we would have to wait forever to get a seat but they said we'll be seated when the girl comes back from seating someone else. We were seated at 5:52 and the waiter came and got our drink orders. Everyone was very pleasant from the host that seated us to the waiter to the server. The prices were very good as well. We placed our orders once we decided what we wanted at 6:02. We shared the baked spaghetti calzone and the small \\\"Here's The Beef\\\" pizza so we can both try them. The calzone was huge and we got the smallest one (personal) and got the small 11\\\" pizza. Both were awesome! My friend liked the pizza better and I liked the calzone better. The calzone does have a sweetish sauce but that's how I like my sauce!\\n\\nWe had to box part of the pizza to take it home and we were out the door by 6:42. So, everything was great and not like these bad reviewers. That goes to show you that  you have to try these things yourself because all these bad reviewers have some serious issues.\",\n          \"General Manager Scott Petello is a good egg!!! Not to go into detail, but let me assure you if you have any issues (albeit rare) speak with Scott and treat the guy with some respect as you state your case and I'd be surprised if you don't walk out totally satisfied as I just did. Like I always say..... \\\"Mistakes are inevitable, it's how we recover from them that is important\\\"!!!\\n\\nThanks to Scott and his awesome staff. You've got a customer for life!! .......... :^)\",\n          \"love the gyro plate. Rice is so good and I also dig their candy selection :)\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Processed Text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"idea people bad review place goes probably gripe fault people like case friend arrive pm past sunday pretty crowded thought sunday evening thought wait forever seat say seated girl come seat seated waiter come get drink order pleasant host seat waiter server price good place order decide want share baked spaghetti calzone small beef pizza try calzone huge get small personal get small pizza awesome friend like pizza well like calzone well calzone sweetish sauce like sauce box pizza home door great like bad reviewer go try thing bad reviewer issue\",\n          \"general manager scott petello good egg detail let assure issue albeit rare speak scott treat guy respect state case surprise walk totally satisfied like mistake inevitable recover important thank scott awesome staff get customer life\",\n          \"love gyro plate rice good dig candy selection\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 143
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "Hzt8vZVM1r0A",
        "outputId": "7ab35a9d-80da-4acf-d8d9-6908bce32d13"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Stars                                               Text Sentiment  \\\n",
              "0      5  My wife took me here on my birthday for breakf...  Positive   \n",
              "1      5  I have no idea why some people give bad review...  Positive   \n",
              "2      4  love the gyro plate. Rice is so good and I als...  Positive   \n",
              "3      5  Rosie, Dakota, and I LOVE Chaparral Dog Park!!...  Positive   \n",
              "4      5  General Manager Scott Petello is a good egg!!!...  Positive   \n",
              "\n",
              "   Sentiment_Label                                     Processed Text  \n",
              "0                2  wife take birthday breakfast excellent weather...  \n",
              "1                2  idea people bad review place goes probably gri...  \n",
              "2                2      love gyro plate rice good dig candy selection  \n",
              "3                2  rosie dakota love chaparral dog park convenien...  \n",
              "4                2  general manager scott petello good egg detail ...  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f27bb94f-2552-4ebf-a2e9-691133d03c3c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Stars</th>\n",
              "      <th>Text</th>\n",
              "      <th>Sentiment</th>\n",
              "      <th>Sentiment_Label</th>\n",
              "      <th>Processed Text</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>5</td>\n",
              "      <td>My wife took me here on my birthday for breakf...</td>\n",
              "      <td>Positive</td>\n",
              "      <td>2</td>\n",
              "      <td>wife take birthday breakfast excellent weather...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>5</td>\n",
              "      <td>I have no idea why some people give bad review...</td>\n",
              "      <td>Positive</td>\n",
              "      <td>2</td>\n",
              "      <td>idea people bad review place goes probably gri...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>4</td>\n",
              "      <td>love the gyro plate. Rice is so good and I als...</td>\n",
              "      <td>Positive</td>\n",
              "      <td>2</td>\n",
              "      <td>love gyro plate rice good dig candy selection</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>5</td>\n",
              "      <td>Rosie, Dakota, and I LOVE Chaparral Dog Park!!...</td>\n",
              "      <td>Positive</td>\n",
              "      <td>2</td>\n",
              "      <td>rosie dakota love chaparral dog park convenien...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>General Manager Scott Petello is a good egg!!!...</td>\n",
              "      <td>Positive</td>\n",
              "      <td>2</td>\n",
              "      <td>general manager scott petello good egg detail ...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f27bb94f-2552-4ebf-a2e9-691133d03c3c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f27bb94f-2552-4ebf-a2e9-691133d03c3c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f27bb94f-2552-4ebf-a2e9-691133d03c3c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-5fbdcc16-da08-49cd-951f-e70997c834de\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5fbdcc16-da08-49cd-951f-e70997c834de')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-5fbdcc16-da08-49cd-951f-e70997c834de button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 10000,\n  \"fields\": [\n    {\n      \"column\": \"Stars\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          4,\n          1,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 9998,\n        \"samples\": [\n          \"I've been to Bookman's a few times and have mixed feelings about it. If you're going just to look around, it's fun to see all the stuff they have in there. Between the movie selection, CD's, books and trinkets, it was fun to shop around. But, as someone interested in selling to them, I would never do that again. I brought in a huge selection of books I was interested in selling and they only took 4 of the books and offered me a few measely dollars. I was shocked. I understand they need to make a profit but I wasn't even getting $1 for each book they wanted. A total rip off if you ask me and a waste of time waiting for them to look through my stuff. I'm not sure if I will be returning anytime soon.\",\n          \"These are simply the BEST sandwiches and salads. If you like your food (a) locally grown; (b) freshly made; (c) organic/all natural; and (d) yummy - and who doesn't? - this is the place for you.\\n\\nNow, admittedly they have something of a soup-nazi routine set up and if you walk in and don't know the drill, it can be confusing.  So pay attention:   \\n1.  Look at menu.\\n2.  Decide what you want.\\n3.  Wait your turn to order.\\n4.  Order (give your name).\\n5.  Wait your turn to be called to pay the other girl for the order you placed.\\n6.  Pay her.\\n7.  Wait until your food is ready.\\n8.  Leave with your food.\\n\\nNote that there is no place to sit inside - so you can either sit outside, or, (if it is 157 degrees out that day), see if you can find a place to sit over at LUX, they are very welcoming of Pane Bianco diners. \\n\\nIt's all good.\",\n          \"Every friday, my dad and I eat here. We order the same thing... pizza wraps. they are good and fillng. iced tea hits the spot. Typical strip mall pizza.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sentiment\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Positive\",\n          \"Negative\",\n          \"Neutral\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sentiment_Label\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2,\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Processed Text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 9996,\n        \"samples\": [\n          \"talk number bartender area fairly extensive personal research feel pretty comfortable say want good cocktail phoenix area head jade bar sanctuary resort beat path bit miles streets street light feel bit like drive ski lodge mountain worth drive excellent cocktail word pendemum club enjoyable informative conversation jillian bartender wish mixology class\",\n          \"eat wildfish open recent saturday evening dining experience quality food service go way downhill know busy saturday night servers chef break sorry menu change quality food good way let brief sample experience ahi tuna tartare appetizer change lackluster combination flavor idea tuna mango lovely total complete blandness way dish serve tuna appetizer far tempting move goat cheese medallion arugula salad salad serve san medallion literally laden huge glob cold goat cheese terribly prepare mushroom happen warm crust goat cheese order parmesan crust sole sole prepare recall dish have cream base sauce past memory serve dish lemon sauce delicately balance flavor fish cream sole happy pair sure error new menu okay piece de resistance order sugar snap pea actually drown bath kind soy oil sauce actually ill eat companion service slow unattentive realize service personal experience sick food poisoning day sunday poorly prepare food bring joy caution enjoy restaurant like think twice drop pretty penny wildfish\",\n          \"get timer shock person year seattle bubble tea gasp readily starbuck learn call boba maybe boba initiation recent office hour gabi completely overwhelmed option present type chewie record term right base drink optional flavoring etc lot gal handle luckily alica leading boba path helped pick concoction thai iced tea regular boba get to start original boba right end coffee drink coffee jelly feel like know ask coffee jelly menu little insider tip wink wink excited think going consider woman patron saint boba commence worship spot surprised find incredibly fill boba hungry hour overall good craving boba want check jelly round craving boba definitely recommend place\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 144
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Model 1 TF - IDF Vectorizer"
      ],
      "metadata": {
        "id": "bOgsuILWiyzh"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Feature Extraction"
      ],
      "metadata": {
        "id": "Ltz2ygTCcgb2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# TF-IDF Features\n",
        "tfidf = TfidfVectorizer(max_features=1000, ngram_range=(1,2))\n",
        "X = tfidf.fit_transform(df['Processed Text'])\n",
        "y = df['Sentiment_Label']"
      ],
      "metadata": {
        "id": "DiCwFSktcjPd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Modeling"
      ],
      "metadata": {
        "id": "DHBhYFtLbvte"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Split data\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Train model\n",
        "nb = MultinomialNB(alpha=0.1)\n",
        "nb.fit(X_train, y_train)\n",
        "\n",
        "# Evaluate\n",
        "y_pred = nb.predict(X_test)"
      ],
      "metadata": {
        "id": "xVx2VD8Cbyyj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Evaluation"
      ],
      "metadata": {
        "id": "pY0eWc8fclgx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Accuracy\n",
        "print('Accuracy:', accuracy_score(y_test, y_pred))\n",
        "\n",
        "# Classification Report\n",
        "print(\"Classification Report:\")\n",
        "print(classification_report(y_test, y_pred, target_names=['Negative', 'Neutral', 'Positive']))\n",
        "\n",
        "# Confusion Matrix\n",
        "cm = confusion_matrix(y_test, y_pred)\n",
        "sns.heatmap(cm, annot=True, fmt='d',\n",
        "            xticklabels=['Negative', 'Neutral', 'Positive'],\n",
        "            yticklabels=['Negative', 'Neutral', 'Positive'])\n",
        "plt.ylabel('Actual')\n",
        "plt.xlabel('Predicted')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "rvDVL8nycnEM",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 663
        },
        "outputId": "edb8ab09-35ee-4690-fa22-1cf9887979bd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 0.7365\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "    Negative       0.83      0.25      0.39       308\n",
            "     Neutral       0.00      0.00      0.00       289\n",
            "    Positive       0.73      0.99      0.84      1403\n",
            "\n",
            "    accuracy                           0.74      2000\n",
            "   macro avg       0.52      0.42      0.41      2000\n",
            "weighted avg       0.64      0.74      0.65      2000\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "feature_names = tfidf.get_feature_names_out()\n",
        "log_probs = nb.feature_log_prob_\n",
        "\n",
        "for i, label in enumerate(['Negative', 'Neutral', 'Positive']):\n",
        "    top_features = np.argsort(log_probs[i])[-10:]  # Top 10 words\n",
        "    print(f\"\\nTop words for {label}:\")\n",
        "    print([feature_names[j] for j in top_features])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5eMwNONwpVfY",
        "outputId": "240d438c-16e1-4886-cd30-2a00208b447a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Top words for Negative:\n",
            "['good place', 'shoot', 'consider', 'great', 'to', 'own', 'great service', 'load', 'plenty', 'friday night']\n",
            "\n",
            "Top words for Neutral:\n",
            "['time go', 'great', 'consider', 'grocery', 'own', 'to', 'load', 'friday night', 'plenty', 'great service']\n",
            "\n",
            "Top words for Positive:\n",
            "['consider', 'own', 'shoot', 'low', 'to', 'load', 'friday night', 'grocery', 'plenty', 'great service']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "vjMJlGJacpVR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Model 2 CountVectorizer (Bag-of-Words)"
      ],
      "metadata": {
        "id": "e6xoL6HDi7WX"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Feature Extraction"
      ],
      "metadata": {
        "id": "nqetFkTYjAZD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Bag-of-Words\n",
        "vectorizer = CountVectorizer(max_features=1000)\n",
        "X = vectorizer.fit_transform(df['Processed Text'])\n",
        "y = df['Sentiment_Label']"
      ],
      "metadata": {
        "id": "z8lNrBC9i_kd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Modeling"
      ],
      "metadata": {
        "id": "RIKxd0iOjFUJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Split data\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Train model\n",
        "nb = MultinomialNB(alpha=0.1)\n",
        "nb.fit(X_train, y_train)\n",
        "\n",
        "# Evaluate\n",
        "y_pred = nb.predict(X_test)"
      ],
      "metadata": {
        "id": "S37rjiDYjl8Z"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Evaluation"
      ],
      "metadata": {
        "id": "rpmQs-Z3j0vj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Accuracy\n",
        "print('Accuracy:', accuracy_score(y_test, y_pred))\n",
        "\n",
        "# Classification Report\n",
        "print(\"Classification Report:\")\n",
        "print(classification_report(y_test, y_pred, target_names=['Negative', 'Neutral', 'Positive']))\n",
        "\n",
        "# Confusion Matrix\n",
        "cm = confusion_matrix(y_test, y_pred)\n",
        "sns.heatmap(cm, annot=True, fmt='d',\n",
        "            xticklabels=['Negative', 'Neutral', 'Positive'],\n",
        "            yticklabels=['Negative', 'Neutral', 'Positive'])\n",
        "plt.ylabel('Actual')\n",
        "plt.xlabel('Predicted')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 663
        },
        "id": "_Y9R8ZlHj2Gf",
        "outputId": "968ee188-72c4-42c8-da63-54c59da0757f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 0.7275\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "    Negative       0.54      0.57      0.55       308\n",
            "     Neutral       0.37      0.34      0.35       289\n",
            "    Positive       0.84      0.84      0.84      1403\n",
            "\n",
            "    accuracy                           0.73      2000\n",
            "   macro avg       0.58      0.58      0.58      2000\n",
            "weighted avg       0.72      0.73      0.73      2000\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "feature_names = vectorizer.get_feature_names_out()\n",
        "log_probs = nb.feature_log_prob_\n",
        "\n",
        "for i, label in enumerate(['Negative', 'Neutral', 'Positive']):\n",
        "    top_features = np.argsort(log_probs[i])[-10:]  # Top 10 words\n",
        "    print(f\"\\nTop words for {label}:\")\n",
        "    print([feature_names[j] for j in top_features])"
      ],
      "metadata": {
        "id": "0WclcFRWqHVv",
        "outputId": "fe932dc6-b4e1-4943-a4a3-b2b83dcd2b3e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Top words for Negative:\n",
            "['get', 'service', 'come', 'go', 'time', 'order', 'good', 'like', 'place', 'food']\n",
            "\n",
            "Top words for Neutral:\n",
            "['think', 'go', 'come', 'great', 'order', 'time', 'like', 'food', 'place', 'good']\n",
            "\n",
            "Top words for Positive:\n",
            "['come', 'order', 'service', 'love', 'time', 'like', 'food', 'great', 'place', 'good']\n"
          ]
        }
      ]
    }
  ]
}
